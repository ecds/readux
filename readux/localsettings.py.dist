# LOCAL settings, specific to current deployment
# this file should *NOT* be checked into version control

import os
BASE_DIR = os.path.dirname(os.path.dirname(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEV_ENV = True
TEMPLATE_DEBUG = True

INTERNAL_IPS = ['127.0.0.1', 'localhost']

ALLOWED_HOSTS = ['localhost']

# users who should get automated django error emails
ADMINS = (
    # ('Your Name', 'your_email@domain.com'),
)

MANAGERS = ADMINS
EMAIL_SUBJECT_PREFIX = '[Readux] '  # prefix for email subjects

# Set to True if you want the beta warning banner displayed on the site (e.g., for QA)
ENABLE_BETA_WARNING = False

# SECURITY WARNING: keep the secret key use d in production secret!
# Generate a new key here: http://www.miniwebtool.com/django-secret-key-generator/
SECRET_KEY = ''

# Database
# https://docs.djangoproject.com/en/1.6/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Directory where uploaded images should be stored
# NOTE: in QA/Prod this should be *outside* fabric deploy directory,
# so it can be preserved across deploys
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# Temporary folder for upload
UPLOAD_TO = os.path.join(BASE_DIR, 'media/upload')

# django-auth-ldap settings
import ldap
from django_auth_ldap.config import LDAPSearch

AUTH_LDAP_SERVER_URI = 'ldaps://ldap.co'
AUTH_LDAP_BIND_DN = ''     # DN of the  base LDAP user (e.g., 'uid=foo,ou=bar,o=emory.edu')
AUTH_LDAP_BIND_PASSWORD = ''           # password for that user
AUTH_LDAP_USER_SEARCH = LDAPSearch("o=...",   ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
# If a cert file needs to be specified, or any other ldap options
# from http://python-ldap.org/doc/html/ldap.html#options are needed,
# add them here:
# AUTH_LDAP_GLOBAL_OPTIONS = {
#     ldap.OPT_X_TLS_CACERTFILE: '...',
# }

AUTH_LDAP_USER_ATTR_MAP = {
    'first_name': 'givenName',
    'last_name': 'sn',
    'email': 'mail',
    # 'phone': 'telephoneNumber',
    # 'dept_num': 'departmentNumber',
    # 'full_name': 'cn',
    # 'title': 'title',
}

# Social Authentication configurations

# Create a new Twitter application: https://apps.twitter.com/app/new
# Configuration must include a callback url.
SOCIAL_AUTH_TWITTER_KEY = ''
SOCIAL_AUTH_TWITTER_SECRET = ''

# Get Google OAuth2 credentials as documented here:
# https://developers.google.com/identity/protocols/OAuth2?csw=1#Registering
# Authentication requires that you enable Google+ API
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = ''
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = ''

# Register application at https://github.com/settings/applications/new
# Callback url should be http://readux.library.emory.edu/complete/github/
SOCIAL_AUTH_GITHUB_KEY = ''
SOCIAL_AUTH_GITHUB_SECRET = ''

# Register application at http://developers.facebook.com/setup/
# For testing, add users to the Tester role at
# https://developers.facebook.com/apps/{{SOCIAL_AUTH_FACEBOOK_KEY}}/roles/
# You will need their Facebook name, but you don't need to be Facebook friends
# to assign them as testers.

SOCIAL_AUTH_FACEBOOK_KEY = '' # the numerical Facebook App ID
SOCIAL_AUTH_FACEBOOK_SECRET = ''
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']   # request email address (not included by default)

# Zotero. Register application at https://www.zotero.org/oauth/apps
SOCIAL_AUTH_ZOTERO_KEY = ''
SOCIAL_AUTH_ZOTERO_SECRET = ''

# If a different set of authentication backends is needed
# than what is configured in readux.settings,
# override AUTHENTICATION_BACKENDS here


# configure which IP addresses are allowed to access the index data service
EUL_INDEXER_ALLOWED_IPS = []

# Solr index that will be used for searching
SOLR_SERVER_URL = "http://server.name:8983/solr/readux/"
# path to Solr cert if running under HTTPS and cert is not auto-loaded
# SOLR_CA_CERT_PATH = ''
# disable SSL validation - DO NOT use this in production!
# SOLR_DISABLE_CERT_CHECK = False

# Fedora Repository settings
FEDORA_ROOT = 'https://localhost:8443/fedora/'
# FEDORA_PIDSPACE = 'readux'
# NOTE: should be configured with a limited access guest account
FEDORA_USER = 'guest'
FEDORA_PASSWORD = 'guest'
# fedora user with access to manage content; used for ingest scripts etc.
FEDORA_MANAGEMENT_USER = 'fedoraAdmin'
FEDORA_MANAGEMENT_PASSWORD = 'fedoraAdmin'
# use this to explicitly configure a test pidspace; by default, uses pidspace-test
# FEDORA_TEST_PIDSPACE = 'testme'
FEDORA_TEST_ROOT = 'https://localhost:8543/fedora/'
# FEDORA_TEST_USER = 'fedoraAdmin'
# FEDORA_TEST_PASSWORD = 'fedoraAdmin'

# pidman PID management
PIDMAN_HOST = '' # web root of pid manager
PIDMAN_USER = ''
PIDMAN_PASSWORD = ''
# PIDMAN_DOMAIN = '' # default domain (e.g., for creating pids)

# URL to the digitization workflow api, e.g. http://my.server.co/digwf_api/
DIGITIZATION_WORKFLOW_API = ''

# threshold where PDFs should be considered *large* and a warning shown to users
LARGE_PDF_THRESHOLD = 1024 * 1024 * 750

# Name to appear in the publicationStmt/distributor of generated TEI
TEI_DISTRIBUTOR = ''  # e.g., Emory University

# list of IPs that can access the site during downtime periods
DOWNTIME_ALLOWED_IPS = ['127.0.0.1']

# IIIF image server (i.e. Loris) integration
IIIF_API_ENDPOINT = 'http://loris.server/'
# optional prefix, for use with Loris templating http resolver; include
IIIF_ID_PREFIX = 'prefix:'
# optional suffix, used when loris expects datastream dilineation (e.g. '|source-image')
IIIF_ID_SUFFIX = ''

# override default git author name if desired
# GIT_AUTHOR_NAME = 'readux'

# path to jekyll import ruby script; override in localsettings if you
# need to specify the path
#JEKYLLIMPORT_TEI_SCRIPT = 'jekyllimport_teifacsimile'


# channels backend configuration
CHANNEL_LAYERS = {
    "default": {
        # in memory is fine for development; use redis for production/qa
        "BACKEND": "asgiref.inmemory.ChannelLayer",
        # "BACKEND": "asgi_redis.RedisChannelLayer",
        # "CONFIG": {
        #     "hosts": [("localhost", 6379)],
        # },
        "ROUTING": "readux.routing.channel_routing",
    },
}

# AWS S3 settings
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_ACCESS_KEY = ''
AWS_S3_BUCKET = ''


# Optional filter for Collections objects in Fedora by owner attribute
# COLLECTIONS_OWNER = ''


# Logging
# https://docs.djangoproject.com/en/1.6/topics/logging/
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'basic': {
            'format': '[%(asctime)s] %(levelname)s:%(name)s::%(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'console':{
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'basic'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
            'include_html': True
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'eulfedora': {
            'handlers': ['console'],
            'level': 'INFO',
        }

    }
}
